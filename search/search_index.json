{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"css add shadow <p>Hi, this is Qihang\ud83d\udc4b. I\u2019m documenting my learning process in this blog. This blog will cover anything I am interested in.</p>"},{"location":"Blogs/2025/04/11/uv-cheatsheet.html","title":"UV Cheatsheet","text":"<p>UV can serve as a faster and more efficient package manager for python. It's very easy to switch to uv if you used to use conda and pip. Here are the basic usage of uv.</p>"},{"location":"Blogs/2025/04/11/uv-cheatsheet.html#overview","title":"Overview","text":"<ul> <li>UV Cheatsheet<ul> <li>Overview</li> <li>How to install UV</li> <li>How to manage the virtual environment via UV</li> <li>\\(\\star\\) How to manage the project via UV</li> <li>How to manage the python version via UV</li> <li>How to manage the cache of UV</li> <li>Link to UV's doc</li> </ul> </li> </ul>"},{"location":"Blogs/2025/04/11/uv-cheatsheet.html#how-to-install-uv","title":"How to install UV","text":"<pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre>"},{"location":"Blogs/2025/04/11/uv-cheatsheet.html#how-to-manage-the-virtual-environment-via-uv","title":"How to manage the virtual environment via UV","text":"<p>It's extremely easy to switch to uv if you used to use conda and pip. But uv is much more faster than conda. Here is a way similar to conda and pip to manage the python version and the dependencies via uv.</p> <ul> <li> <p>To create a virtual environment: <pre><code>uv venv\n</code></pre></p> </li> <li> <p>To create a virtual environment at my-name(specific path): <pre><code>uv venv my-name\n</code></pre></p> </li> <li> <p>To create a virtual environment with specific python version: <pre><code>uv venv --python 3.11\n</code></pre></p> </li> <li> <p>To activate the environment: <pre><code>source .venv/bin/activate\n</code></pre></p> </li> <li> <p>To deactivate the environment: <pre><code>deactivate\n</code></pre></p> </li> </ul> <p>The dependencies management in virtual environment is very similar to pip.</p> <ul> <li>To install a package: <pre><code>uv pip install &lt;package&gt;\n</code></pre></li> <li>To uninstall a package: <pre><code>uv pip uninstall &lt;package&gt;\n</code></pre></li> <li>To list installed packages: <pre><code>uv pip list\n</code></pre></li> </ul>"},{"location":"Blogs/2025/04/11/uv-cheatsheet.html#star-how-to-manage-the-project-via-uv","title":"\\(\\star\\) How to manage the project via UV","text":"<p>What is more convienient and elegant is that uv can manage the project along with its environment as well as corresponding dependencies. There is another way to manage the project and dependencies.</p> <p>In each project, uv will create <code>pyproject.toml</code> file to manage the dependencies and update the environment according to the <code>pyproject.toml</code> file. Here is the way to manage the project and dependencies.</p> <ul> <li> <p>To create a new project,cd to the project directory and run: <pre><code>uv init\n</code></pre> uv will create a <code>pyproject.toml</code> file.</p> </li> <li> <p>To create virtual environment according to the <code>pyproject.toml</code> file: <pre><code>uv venv\n</code></pre></p> </li> <li> <p>To update the environment according to the <code>pyproject.toml</code> file: <pre><code>uv sync\n</code></pre></p> </li> <li> <p>To run the program in the corresponding environment: <pre><code>uv run &lt;command&gt;\n</code></pre> <code>uv run</code> can directly run the program in the corresponding environment. It's similar to <code>source .venv/bin/activate</code> and <code>python &lt;command&gt;</code>. </p> <p>Before running the program, uv will also automatically update the environment according to the pyproject.toml file. So <code>uv run</code> is the most convenient way to run any program in this project.</p> <ul> <li> <p>For example, if you want to run the program <code>main.py</code>, you can run: <pre><code>uv run main.py\n</code></pre></p> </li> <li> <p>if you want to run the shell script <code>script.sh</code>, you can run: <pre><code>uv run zsh script.sh\n</code></pre></p> </li> </ul> </li> <li> <p>To add the dependencies in the <code>pyproject.toml</code> file: <pre><code>uv add &lt;package&gt;\n</code></pre></p> </li> <li> <p>To remove the dependencies in the <code>pyproject.toml</code> file: <pre><code>uv remove &lt;package&gt;\n</code></pre></p> </li> <li> <p>To upgrade the dependencies in the <code>pyproject.toml</code> file: <pre><code>uv lock --upgrade-package &lt;package&gt;\n</code></pre></p> </li> </ul>"},{"location":"Blogs/2025/04/11/uv-cheatsheet.html#how-to-manage-the-python-version-via-uv","title":"How to manage the python version via UV","text":"<ul> <li>To change the python version pinned in a project: run the following command: <pre><code>uv pin python 3.11\n</code></pre> or directly edit the <code>.python-version</code> file.</li> </ul>"},{"location":"Blogs/2025/04/11/uv-cheatsheet.html#how-to-manage-the-cache-of-uv","title":"How to manage the cache of UV","text":"<ul> <li>To clean the cache of UV: run the following command: <pre><code>uv cache clean\n</code></pre></li> </ul>"},{"location":"Blogs/2025/04/11/uv-cheatsheet.html#link-to-uvs-doc","title":"Link to UV's doc","text":""},{"location":"Blogs/archive/2025.html","title":"2025","text":""},{"location":"Blogs/category/developing-tools.html","title":"Developing Tools","text":""}]}